# 第一步创建命名空间 `kubectl create namespace homework-woshizilong`
apiVersion: v1
kind: ServiceAccount
metadata:
  name: httpserver-sa
  namespace: homework-woshizilong
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: httpserver-role
rules:
- apiGroups: [""]
# configmaps is needed for updating logging config
  resources: ["configmaps"]
  verbs: ["get", "list", "watch"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: httpserver-rolebinding
  namespace: homework-woshizilong
subjects:
- kind: ServiceAccount
  name: httpserver-sa
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: httpserver-role
---



apiVersion: v1
kind: Secret
metadata:
  name: admin-secret
  namespace: homework-woshizilong
  labels:
    app: httpserver
data:
  username: bXktYXBw
  password: Mzk1MjgkdmRnN0pi
---
# httpserver环境配置
apiVersion: v1
kind: ConfigMap
metadata:
  name: httpserver-env
  namespace: homework-woshizilong
  labels:
    app: httpserver
data:
  test.phase: okteto

---
# httpserver网络环境配置
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: default-deny-all
  namespace: homework-woshizilong
spec:
  podSelector: {}
  policyTypes:
  - Ingress
---
# 允许标记networking/allow-internet-access为true的pod接收来自internet的请求流量
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: internet-access
  namespace: homework-woshizilong
spec:
  podSelector:
    matchLabels:
      networking/allow-internet-access: "true"
  policyTypes:
  - Ingress
  ingress:
  - {}
---
# 允许同一namespace下的pod之间通过网络访问
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-same-namespace
  namespace: homework-woshizilong
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  ingress:
  - from:
    - podSelector: {}
---
# 允许标记networking/allow-db-access为true的pod访问标记app=db的pod
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-db-access
spec:
  podSelector:
    matchLabels:
      app: "db"
  policyTypes:
  - Ingress
  ingress:
  - from:
    - podSelector:
        matchLabels:
          networking/allow-db-access: "true"
---
# httpserver部署配置
apiVersion: apps/v1
kind: Deployment
metadata:
  name: httpserver
  namespace: homework-woshizilong
  labels:
    app: httpserver
    owner: e0050
  annotations:
    email: kaba-tech@outlook.com
spec:
  replicas: 3
  selector:
    matchLabels:
      app: httpserver
  strategy:
    type: RollingUpdate
    rollingUpdate:  ##由于replicas为3,则整个升级,pod个数在2-4个之间
      maxSurge: 1      #滚动升级时会先启动1个pod
      maxUnavailable: 1 #滚动升级时允许的最大Unavailable的pod个数
  template:
    metadata:
      labels:
        app: httpserver
        networking/allow-internet-access: "true"
        owner: e0050
      annotations:
        email: kaba-tech@outlook.com
        prometheus.io/scrape: "true"
        prometheus.io/port: "8000"
    spec:
      serviceAccountName: httpserver-sa
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchLabels:
                  app: httpserver
              topologyKey: kubernetes.io/hostname # 基于node的hostname设定反亲和性，目的是避免pod调度到同一个node上。
      initContainers:
        - name: init-myservice
          image: busybox:1.28
          command: ['sh', '-c', 'echo The app is running! && sleep 30']
      containers:
        # kabacloud/httpserver:v0.0.2
        - image: "ko://github.com/kabacloud/cloudnativehomework4-module10"
          name: httpserver
          securityContext:
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 1000
          resources:
            limits:
              cpu: "250m"
              memory: 50Mi
            requests:
              cpu: "100m"
              memory: 10Mi
          env:
            - name: HWENV
              valueFrom:
                configMapKeyRef:
                  name: httpserver-env
                  key: test.phase
          volumeMounts:
            # name must match the volume name below
            - name: secret-volume
              mountPath: /etc/secret-volume
          command: ["/sbin/tini", "--"]
          args: ["/ko-app/cloudnativehomework4-module10", "serve"]
          ports:
            - name: liveness-port
              containerPort: 8000
          livenessProbe:
            httpGet:
              path: /healthz
              port: liveness-port
              httpHeaders:
              - name: VERSION
                value: Awesome
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 30
            failureThreshold: 4
          readinessProbe:
            httpGet:
              path: /readyz
              port: liveness-port
              httpHeaders:
              - name: VERSION
                value: Awesome
            initialDelaySeconds: 15
            periodSeconds: 5
            timeoutSeconds: 30
            failureThreshold: 4
      volumes:
        - name: secret-volume
          secret:
            secretName: admin-secret
---
# 集群内服务配置
apiVersion: v1
kind: Service
metadata:
  name: httpserver
  namespace: homework-woshizilong
  labels:
    app: httpserver
  annotations:
    dev.okteto.com/auto-ingress: "true"
spec:
  type: ClusterIP 
  ports:
  - name: httpserver
    port: 8000 # 抽象的 Service 端口，可以使任何其它 Pod 访问该 Service 的端口
  selector:
    app: httpserver # 具有 app=httpserver 标签的 pod 都属于该服务
